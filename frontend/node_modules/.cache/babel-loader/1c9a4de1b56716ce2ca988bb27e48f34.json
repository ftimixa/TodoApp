{"ast":null,"code":"import { GET_TASKS, GET_USERS, ADD_TASK, REMOVE_TASK, INCREASE_PRIORTY, DECREASE_PRIORITY } from '../../constants';\nexport const addTask = (id, description, executor, priority) => ({\n  type: ADD_TASK,\n  id,\n  description,\n  executor,\n  priority\n});\nexport const tasksPostData = (id, description, executor, priority) => {\n  return dispatch => {\n    fetch('/api/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: {\n        id,\n        description,\n        executor,\n        priority\n      }\n    }).then(response => response.json());\n    console.log(id, description, executor, priority).then((id, description, executor, priority) => dispatch(addTask(id, description, executor, priority)));\n  };\n};\nexport const removeTask = id => ({\n  type: REMOVE_TASK,\n  id\n});\nexport const increasePriority = id => ({\n  type: INCREASE_PRIORTY,\n  id\n});\nexport const decreasePriority = id => ({\n  type: DECREASE_PRIORITY,\n  id\n});\nexport const tasksFetchSuccess = tasks => ({\n  type: GET_TASKS,\n  tasks\n});\nexport const tasksFetchData = url => {\n  return dispatch => {\n    fetch(url).then(response => response.json()).then(tasks => dispatch(tasksFetchSuccess(tasks)));\n  };\n};\nexport const usersFetchSuccess = users => ({\n  type: GET_USERS,\n  users\n});\nexport const usersFetchData = url => {\n  return dispatch => {\n    fetch(url).then(response => response.json()).then(users => dispatch(usersFetchSuccess(users)));\n  };\n};","map":{"version":3,"sources":["C:/Users/Grechka_Mi/Documents/react-express-example-master/frontend/src/TodoApp/actions/actionCreator.js"],"names":["GET_TASKS","GET_USERS","ADD_TASK","REMOVE_TASK","INCREASE_PRIORTY","DECREASE_PRIORITY","addTask","id","description","executor","priority","type","tasksPostData","dispatch","fetch","method","headers","body","then","response","json","console","log","removeTask","increasePriority","decreasePriority","tasksFetchSuccess","tasks","tasksFetchData","url","usersFetchSuccess","users","usersFetchData"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,SAAnB,EAA8BC,QAA9B,EAAwCC,WAAxC,EAAqDC,gBAArD,EAAuEC,iBAAvE,QAAgG,iBAAhG;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,EAAD,EAAKC,WAAL,EAAkBC,QAAlB,EAA4BC,QAA5B,MAA0C;AAC/DC,EAAAA,IAAI,EAAET,QADyD;AAE/DK,EAAAA,EAF+D;AAG/DC,EAAAA,WAH+D;AAI/DC,EAAAA,QAJ+D;AAK/DC,EAAAA;AAL+D,CAA1C,CAAhB;AAQP,OAAO,MAAME,aAAa,GAAG,CAACL,EAAD,EAAKC,WAAL,EAAkBC,QAAlB,EAA4BC,QAA5B,KAAyC;AACpE,SAAQG,QAAD,IAAc;AACnBC,IAAAA,KAAK,CAAC,YAAD,EAAe;AAClBC,MAAAA,MAAM,EAAE,MADU;AAElBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFS;AAKlBC,MAAAA,IAAI,EAAE;AAACV,QAAAA,EAAD;AAAKC,QAAAA,WAAL;AAAkBC,QAAAA,QAAlB;AAA4BC,QAAAA;AAA5B;AALY,KAAf,CAAL,CAOGQ,IAPH,CAOQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPpB;AAQEC,IAAAA,OAAO,CAACC,GAAR,CAAYf,EAAZ,EAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,QAAvC,EACCQ,IADD,CACM,CAACX,EAAD,EAAKC,WAAL,EAAkBC,QAAlB,EAA4BC,QAA5B,KAAyCG,QAAQ,CAACP,OAAO,CAACC,EAAD,EAAKC,WAAL,EAAkBC,QAAlB,EAA4BC,QAA5B,CAAR,CADvD;AAEH,GAXD;AAYD,CAbM;AAeP,OAAO,MAAMa,UAAU,GAAGhB,EAAE,KAAK;AAC/BI,EAAAA,IAAI,EAAER,WADyB;AAE/BI,EAAAA;AAF+B,CAAL,CAArB;AAKP,OAAO,MAAMiB,gBAAgB,GAAGjB,EAAE,KAAK;AACrCI,EAAAA,IAAI,EAAEP,gBAD+B;AAErCG,EAAAA;AAFqC,CAAL,CAA3B;AAKP,OAAO,MAAMkB,gBAAgB,GAAGlB,EAAE,KAAK;AACrCI,EAAAA,IAAI,EAAEN,iBAD+B;AAErCE,EAAAA;AAFqC,CAAL,CAA3B;AAKP,OAAO,MAAMmB,iBAAiB,GAAIC,KAAD,KAAY;AAC3ChB,EAAAA,IAAI,EAAEX,SADqC;AAE3C2B,EAAAA;AAF2C,CAAZ,CAA1B;AAKP,OAAO,MAAMC,cAAc,GAAGC,GAAG,IAAI;AACnC,SAAQhB,QAAD,IAAc;AACnBC,IAAAA,KAAK,CAACe,GAAD,CAAL,CACGX,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQS,KAAK,IAAId,QAAQ,CAACa,iBAAiB,CAACC,KAAD,CAAlB,CAFzB;AAGD,GAJD;AAKD,CANM;AAQP,OAAO,MAAMG,iBAAiB,GAAIC,KAAD,KAAY;AAC3CpB,EAAAA,IAAI,EAAEV,SADqC;AAE3C8B,EAAAA;AAF2C,CAAZ,CAA1B;AAKP,OAAO,MAAMC,cAAc,GAAGH,GAAG,IAAI;AACnC,SAAQhB,QAAD,IAAc;AACnBC,IAAAA,KAAK,CAACe,GAAD,CAAL,CACGX,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQa,KAAK,IAAIlB,QAAQ,CAACiB,iBAAiB,CAACC,KAAD,CAAlB,CAFzB;AAGD,GAJD;AAKD,CANM","sourcesContent":["import {GET_TASKS, GET_USERS, ADD_TASK, REMOVE_TASK, INCREASE_PRIORTY, DECREASE_PRIORITY } from '../../constants';\r\n\r\nexport const addTask = (id, description, executor, priority) => ({\r\n  type: ADD_TASK,\r\n  id,\r\n  description,\r\n  executor,\r\n  priority\r\n});\r\n\r\nexport const tasksPostData = (id, description, executor, priority) => {\r\n  return (dispatch) => {\r\n    fetch('/api/tasks', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: {id, description, executor, priority}\r\n    })\r\n      .then(response => response.json())\r\n      console.log(id, description, executor, priority)\r\n      .then((id, description, executor, priority) => dispatch(addTask(id, description, executor, priority)))\r\n  }\r\n}\r\n\r\nexport const removeTask = id => ({\r\n  type: REMOVE_TASK,\r\n  id\r\n})\r\n\r\nexport const increasePriority = id => ({\r\n  type: INCREASE_PRIORTY,\r\n  id\r\n})\r\n\r\nexport const decreasePriority = id => ({\r\n  type: DECREASE_PRIORITY,\r\n  id\r\n})\r\n\r\nexport const tasksFetchSuccess = (tasks) => ({\r\n  type: GET_TASKS,\r\n  tasks\r\n})\r\n\r\nexport const tasksFetchData = url => {\r\n  return (dispatch) => {\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(tasks => dispatch(tasksFetchSuccess(tasks)))\r\n  }\r\n}\r\n\r\nexport const usersFetchSuccess = (users) => ({\r\n  type: GET_USERS,\r\n  users\r\n})\r\n\r\nexport const usersFetchData = url => {\r\n  return (dispatch) => {\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(users => dispatch(usersFetchSuccess(users)))\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}