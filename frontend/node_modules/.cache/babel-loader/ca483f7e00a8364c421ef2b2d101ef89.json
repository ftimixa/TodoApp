{"ast":null,"code":"import { USERS_LOADED, USERS_REQUESTED, USERS_ERROR, TASKS_LOADED } from '../../constants';\nimport { usersLoaded, tasksLoaded, usersError } from '../actions/actionCreator';\nconst initialState = {\n  users: [],\n  loaded: true,\n  error: null\n};\nexport const usersReducer = (state = initialState, {\n  type,\n  users,\n  error\n}) => {\n  switch (type) {\n    case USERS_REQUESTED:\n      return {\n        users: [],\n        loaded: true,\n        error: null\n      };\n\n    case USERS_LOADED:\n      return {\n        users,\n        loaded: false,\n        error: null\n      };\n\n    case USERS_ERROR:\n      return {\n        users: [],\n        loaded: false,\n        error: error\n      };\n\n    default:\n      return state;\n  }\n};\nexport const tasksReducer = (state = [], {\n  type,\n  tasks\n}) => {\n  switch (type) {\n    case TASKS_LOADED:\n      return tasks;\n\n    default:\n      return state;\n  }\n};\nexport const loadUsers = () => dispatch => {\n  setTimeout(async () => {\n    await fetch(\"/api/users\").then(res => res.json()).then(users => dispatch(usersLoaded(users))).catch(err => dispatch(usersError(err)));\n  }, 1000);\n};\nexport const loadTasks = () => async dispatch => {\n  const tasks = await fetch(\"/api/tasks\").then(res => res.json());\n  dispatch(tasksLoaded(tasks));\n};\nexport const saveTask = task => async dispatch => {\n  await fetch(\"/api/tasks\", {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(task)\n  }).then(res => res.json()).then(tasks => dispatch(tasksLoaded(tasks)));\n};\nexport const changePriority = (id, nameAction) => async dispatch => {\n  await fetch(`/api/tasks/${id}`, {\n    method: \"PUT\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      nameAction\n    })\n  }).then(res => res.json()).then(tasks => dispatch(tasksLoaded(tasks)));\n};\nexport const removeTask = id => async dispatch => {\n  await fetch(`/api/tasks/${id}`, {\n    method: \"DELETE\"\n  }).then(res => res.json()).then(tasks => dispatch(tasksLoaded(tasks)));\n};","map":{"version":3,"sources":["C:/Users/Grechka_Mi/Documents/react-express-example-master/frontend/src/TodoApp/reducers/reducers.js"],"names":["USERS_LOADED","USERS_REQUESTED","USERS_ERROR","TASKS_LOADED","usersLoaded","tasksLoaded","usersError","initialState","users","loaded","error","usersReducer","state","type","tasksReducer","tasks","loadUsers","dispatch","setTimeout","fetch","then","res","json","catch","err","loadTasks","saveTask","task","method","headers","body","JSON","stringify","changePriority","id","nameAction","removeTask"],"mappings":"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","sourcesContent":["import {USERS_LOADED, USERS_REQUESTED, USERS_ERROR, TASKS_LOADED, } from '../../constants';\r\nimport {usersLoaded, tasksLoaded, usersError} from '../actions/actionCreator';\r\n\r\nconst initialState = {\r\n  users: [],\r\n  loaded: true,\r\n  error: null\r\n}\r\n\r\nexport const usersReducer = (state = initialState, {type, users, error}) => {\r\n  switch (type) {\r\n    case USERS_REQUESTED:\r\n      return {\r\n        users: [],\r\n        loaded: true,\r\n        error: null,\r\n      }\r\n    case USERS_LOADED:\r\n      return {\r\n        users,\r\n        loaded: false,\r\n        error: null,\r\n      }\r\n    case USERS_ERROR:\r\n      return {\r\n        users: [],\r\n        loaded: false,\r\n        error: error,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const tasksReducer = (state = [], { type, tasks }) => {\r\n  switch (type) {\r\n    case TASKS_LOADED:\r\n      return tasks\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const loadUsers = () => (dispatch) => {\r\n setTimeout(async () => {\r\n  await fetch(\"/api/users\")\r\n  .then(res => res.json())\r\n  .then(users => dispatch(usersLoaded(users)))\r\n  .catch(err => dispatch(usersError(err)))\r\n  }, 1000) \r\n}\r\n\r\nexport const loadTasks = () => async (dispatch) => {\r\n  const tasks = await fetch(\"/api/tasks\").then(res => res.json())\r\n  dispatch(tasksLoaded(tasks))\r\n}\r\n\r\nexport const saveTask = (task) => async (dispatch) => {\r\n  await fetch(\"/api/tasks\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-type': 'application/json'\r\n    },\r\n    body: JSON.stringify(task)\r\n  })\r\n  .then(res => res.json())\r\n  .then(tasks => dispatch(tasksLoaded(tasks)))\r\n}\r\n\r\nexport const changePriority = (id, nameAction) => async (dispatch) => {\r\n  await fetch(`/api/tasks/${id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-type': 'application/json'\r\n    },\r\n    body: JSON.stringify({nameAction})\r\n  })\r\n  .then(res => res.json())\r\n  .then(tasks => dispatch(tasksLoaded(tasks)))\r\n}\r\n\r\nexport const removeTask = (id) => async (dispatch) => {\r\n  await fetch(`/api/tasks/${id}`, {\r\n    method: \"DELETE\",\r\n  })\r\n  .then(res => res.json())\r\n  .then(tasks => dispatch(tasksLoaded(tasks)))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}