{"ast":null,"code":"import { USERS_LOADED, USERS_ERROR, TASKS_LOADED } from '../../constants';\nimport { usersLoaded, tasksLoaded, usersError } from '../actions/actionCreator';\nconst initialState = {\n  users: [],\n  error: null\n};\nexport const usersReducer = (state = initialState, {\n  type,\n  users,\n  error\n}) => {\n  switch (type) {\n    case USERS_LOADED:\n      return {\n        users,\n        error: null\n      };\n\n    case USERS_ERROR:\n      return {\n        users: [],\n        error: error\n      };\n\n    default:\n      return state;\n  }\n};\nexport const tasksReducer = (state = [], {\n  type,\n  tasks,\n  error\n}) => {\n  switch (type) {\n    case TASKS_LOADED:\n      return tasks;\n\n    case TASKS_ERROR:\n      return {\n        tasks: [],\n        error: error\n      };\n\n    default:\n      return state;\n  }\n};\nexport const loadUsers = () => async dispatch => {\n  await fetch(\"/api/users\").then(res => res.json()).then(users => dispatch(usersLoaded(users))).catch(err => dispatch(usersError(err)));\n};\nexport const loadTasks = () => async dispatch => {\n  const tasks = await fetch(\"/api/tasks\").then(res => res.json());\n  dispatch(tasksLoaded(tasks));\n};\nexport const saveTask = task => async dispatch => {\n  await fetch(\"/api/tasks\", {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(task)\n  }).then(res => res.json()).then(tasks => dispatch(tasksLoaded(tasks)));\n};\nexport const changePriority = (id, nameAction) => async dispatch => {\n  await fetch(`/api/tasks/${id}`, {\n    method: \"PUT\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      nameAction\n    })\n  }).then(res => res.json()).then(tasks => dispatch(tasksLoaded(tasks)));\n};\nexport const removeTask = id => async dispatch => {\n  await fetch(`/api/tasks/${id}`, {\n    method: \"DELETE\"\n  }).then(res => res.json()).then(tasks => dispatch(tasksLoaded(tasks)));\n};","map":{"version":3,"sources":["C:/Users/Grechka_Mi/Documents/react-express-example-master/frontend/src/TodoApp/reducers/reducers.js"],"names":["USERS_LOADED","USERS_ERROR","TASKS_LOADED","usersLoaded","tasksLoaded","usersError","initialState","users","error","usersReducer","state","type","tasksReducer","tasks","TASKS_ERROR","loadUsers","dispatch","fetch","then","res","json","catch","err","loadTasks","saveTask","task","method","headers","body","JSON","stringify","changePriority","id","nameAction","removeTask"],"mappings":"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","sourcesContent":["import {USERS_LOADED, USERS_ERROR, TASKS_LOADED, } from '../../constants';\r\nimport {usersLoaded, tasksLoaded, usersError} from '../actions/actionCreator';\r\n\r\nconst initialState = {\r\n  users: [],\r\n  error: null\r\n}\r\n\r\nexport const usersReducer = (state = initialState, {type, users, error}) => {\r\n  switch (type) {\r\n    case USERS_LOADED:\r\n      return {\r\n        users,\r\n        error: null,\r\n      }\r\n    case USERS_ERROR:\r\n      return {\r\n        users: [],\r\n        error: error,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const tasksReducer = (state = [], { type, tasks, error }) => {\r\n  switch (type) {\r\n    case TASKS_LOADED:\r\n      return tasks\r\n    case TASKS_ERROR:\r\n      return {\r\n        tasks: [],\r\n        error: error,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const loadUsers = () => async (dispatch) => {\r\n  await fetch(\"/api/users\")\r\n  .then(res => res.json())\r\n  .then(users => dispatch(usersLoaded(users)))\r\n  .catch(err => dispatch(usersError(err)))\r\n}\r\n\r\nexport const loadTasks = () => async (dispatch) => {\r\n  const tasks = await fetch(\"/api/tasks\").then(res => res.json())\r\n  dispatch(tasksLoaded(tasks))\r\n}\r\n\r\nexport const saveTask = (task) => async (dispatch) => {\r\n  await fetch(\"/api/tasks\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-type': 'application/json'\r\n    },\r\n    body: JSON.stringify(task)\r\n  })\r\n  .then(res => res.json())\r\n  .then(tasks => dispatch(tasksLoaded(tasks)))\r\n}\r\n\r\nexport const changePriority = (id, nameAction) => async (dispatch) => {\r\n  await fetch(`/api/tasks/${id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-type': 'application/json'\r\n    },\r\n    body: JSON.stringify({nameAction})\r\n  })\r\n  .then(res => res.json())\r\n  .then(tasks => dispatch(tasksLoaded(tasks)))\r\n}\r\n\r\nexport const removeTask = (id) => async (dispatch) => {\r\n  await fetch(`/api/tasks/${id}`, {\r\n    method: \"DELETE\",\r\n  })\r\n  .then(res => res.json())\r\n  .then(tasks => dispatch(tasksLoaded(tasks)))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}